/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use regex::Regex;
use once_cell::sync::Lazy;
use rustemo::StringLexer;
use rustemo::LRBuilder;
use super::calculator_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use colored::*;
pub type Input = str;
const STATE_COUNT: usize = 45usize;
const MAX_RECOGNIZERS: usize = 10usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 15usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    Number,
    Bang,
    OpenParenthesis,
    CloseParenthesis,
    True,
    False,
    Plus,
    Minus,
    Mul,
    Div,
    AmpersandAmpersand,
    PipePipe,
    EqualsEquals,
    BangEquals,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ExpressionP1,
    LogicalExpressionP1,
    LogicalExpressionRestP1,
    LogicalExpressionRestP2,
    RelationalExpressionP1,
    RelationalExpressionRestP1,
    RelationalExpressionRestP2,
    RelationalExpressionRestP3,
    RelationalExpressionRestP4,
    ArithmeticExpressionP1,
    ArithmeticExpressionRestP1,
    ArithmeticExpressionRestP2,
    ArithmeticExpressionRestP3,
    TermP1,
    TermRestP1,
    TermRestP2,
    TermRestP3,
    FactorP1,
    FactorP2,
    FactorP3,
    FactorP4,
    FactorP5,
    FactorP6,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ExpressionP1 => "Expression: LogicalExpression",
            ProdKind::LogicalExpressionP1 => {
                "LogicalExpression: RelationalExpression LogicalExpressionRest"
            }
            ProdKind::LogicalExpressionRestP1 => {
                "LogicalExpressionRest: PipePipe RelationalExpression LogicalExpressionRest"
            }
            ProdKind::LogicalExpressionRestP2 => "LogicalExpressionRest: ",
            ProdKind::RelationalExpressionP1 => {
                "RelationalExpression: ArithmeticExpression RelationalExpressionRest"
            }
            ProdKind::RelationalExpressionRestP1 => {
                "RelationalExpressionRest: AmpersandAmpersand ArithmeticExpression RelationalExpressionRest"
            }
            ProdKind::RelationalExpressionRestP2 => {
                "RelationalExpressionRest: EqualsEquals ArithmeticExpression RelationalExpressionRest"
            }
            ProdKind::RelationalExpressionRestP3 => {
                "RelationalExpressionRest: BangEquals ArithmeticExpression RelationalExpressionRest"
            }
            ProdKind::RelationalExpressionRestP4 => "RelationalExpressionRest: ",
            ProdKind::ArithmeticExpressionP1 => {
                "ArithmeticExpression: Term ArithmeticExpressionRest"
            }
            ProdKind::ArithmeticExpressionRestP1 => {
                "ArithmeticExpressionRest: Plus Term ArithmeticExpressionRest"
            }
            ProdKind::ArithmeticExpressionRestP2 => {
                "ArithmeticExpressionRest: Minus Term ArithmeticExpressionRest"
            }
            ProdKind::ArithmeticExpressionRestP3 => "ArithmeticExpressionRest: ",
            ProdKind::TermP1 => "Term: Factor TermRest",
            ProdKind::TermRestP1 => "TermRest: Mul Factor TermRest",
            ProdKind::TermRestP2 => "TermRest: Div Factor TermRest",
            ProdKind::TermRestP3 => "TermRest: ",
            ProdKind::FactorP1 => "Factor: Bang Factor",
            ProdKind::FactorP2 => "Factor: OpenParenthesis Expression CloseParenthesis",
            ProdKind::FactorP3 => "Factor: Minus Factor",
            ProdKind::FactorP4 => "Factor: Number",
            ProdKind::FactorP5 => "Factor: True",
            ProdKind::FactorP6 => "Factor: False",
        };
        write!(f, "{}", name)
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Expression,
    LogicalExpression,
    LogicalExpressionRest,
    RelationalExpression,
    RelationalExpressionRest,
    ArithmeticExpression,
    ArithmeticExpressionRest,
    Term,
    TermRest,
    Factor,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ExpressionP1 => NonTermKind::Expression,
            ProdKind::LogicalExpressionP1 => NonTermKind::LogicalExpression,
            ProdKind::LogicalExpressionRestP1 => NonTermKind::LogicalExpressionRest,
            ProdKind::LogicalExpressionRestP2 => NonTermKind::LogicalExpressionRest,
            ProdKind::RelationalExpressionP1 => NonTermKind::RelationalExpression,
            ProdKind::RelationalExpressionRestP1 => NonTermKind::RelationalExpressionRest,
            ProdKind::RelationalExpressionRestP2 => NonTermKind::RelationalExpressionRest,
            ProdKind::RelationalExpressionRestP3 => NonTermKind::RelationalExpressionRest,
            ProdKind::RelationalExpressionRestP4 => NonTermKind::RelationalExpressionRest,
            ProdKind::ArithmeticExpressionP1 => NonTermKind::ArithmeticExpression,
            ProdKind::ArithmeticExpressionRestP1 => NonTermKind::ArithmeticExpressionRest,
            ProdKind::ArithmeticExpressionRestP2 => NonTermKind::ArithmeticExpressionRest,
            ProdKind::ArithmeticExpressionRestP3 => NonTermKind::ArithmeticExpressionRest,
            ProdKind::TermP1 => NonTermKind::Term,
            ProdKind::TermRestP1 => NonTermKind::TermRest,
            ProdKind::TermRestP2 => NonTermKind::TermRest,
            ProdKind::TermRestP3 => NonTermKind::TermRest,
            ProdKind::FactorP1 => NonTermKind::Factor,
            ProdKind::FactorP2 => NonTermKind::Factor,
            ProdKind::FactorP3 => NonTermKind::Factor,
            ProdKind::FactorP4 => NonTermKind::Factor,
            ProdKind::FactorP5 => NonTermKind::Factor,
            ProdKind::FactorP6 => NonTermKind::Factor,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    NumberS1,
    BangS2,
    OpenParenthesisS3,
    TrueS4,
    FalseS5,
    MinusS6,
    ExpressionS7,
    LogicalExpressionS8,
    RelationalExpressionS9,
    ArithmeticExpressionS10,
    TermS11,
    FactorS12,
    FactorS13,
    ExpressionS14,
    FactorS15,
    PipePipeS16,
    LogicalExpressionRestS17,
    AmpersandAmpersandS18,
    EqualsEqualsS19,
    BangEqualsS20,
    RelationalExpressionRestS21,
    PlusS22,
    MinusS23,
    ArithmeticExpressionRestS24,
    MulS25,
    DivS26,
    TermRestS27,
    CloseParenthesisS28,
    RelationalExpressionS29,
    ArithmeticExpressionS30,
    ArithmeticExpressionS31,
    ArithmeticExpressionS32,
    TermS33,
    TermS34,
    FactorS35,
    FactorS36,
    LogicalExpressionRestS37,
    RelationalExpressionRestS38,
    RelationalExpressionRestS39,
    RelationalExpressionRestS40,
    ArithmeticExpressionRestS41,
    ArithmeticExpressionRestS42,
    TermRestS43,
    TermRestS44,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::NumberS1 => "1:Number",
            State::BangS2 => "2:Bang",
            State::OpenParenthesisS3 => "3:OpenParenthesis",
            State::TrueS4 => "4:True",
            State::FalseS5 => "5:False",
            State::MinusS6 => "6:Minus",
            State::ExpressionS7 => "7:Expression",
            State::LogicalExpressionS8 => "8:LogicalExpression",
            State::RelationalExpressionS9 => "9:RelationalExpression",
            State::ArithmeticExpressionS10 => "10:ArithmeticExpression",
            State::TermS11 => "11:Term",
            State::FactorS12 => "12:Factor",
            State::FactorS13 => "13:Factor",
            State::ExpressionS14 => "14:Expression",
            State::FactorS15 => "15:Factor",
            State::PipePipeS16 => "16:PipePipe",
            State::LogicalExpressionRestS17 => "17:LogicalExpressionRest",
            State::AmpersandAmpersandS18 => "18:AmpersandAmpersand",
            State::EqualsEqualsS19 => "19:EqualsEquals",
            State::BangEqualsS20 => "20:BangEquals",
            State::RelationalExpressionRestS21 => "21:RelationalExpressionRest",
            State::PlusS22 => "22:Plus",
            State::MinusS23 => "23:Minus",
            State::ArithmeticExpressionRestS24 => "24:ArithmeticExpressionRest",
            State::MulS25 => "25:Mul",
            State::DivS26 => "26:Div",
            State::TermRestS27 => "27:TermRest",
            State::CloseParenthesisS28 => "28:CloseParenthesis",
            State::RelationalExpressionS29 => "29:RelationalExpression",
            State::ArithmeticExpressionS30 => "30:ArithmeticExpression",
            State::ArithmeticExpressionS31 => "31:ArithmeticExpression",
            State::ArithmeticExpressionS32 => "32:ArithmeticExpression",
            State::TermS33 => "33:Term",
            State::TermS34 => "34:Term",
            State::FactorS35 => "35:Factor",
            State::FactorS36 => "36:Factor",
            State::LogicalExpressionRestS37 => "37:LogicalExpressionRest",
            State::RelationalExpressionRestS38 => "38:RelationalExpressionRest",
            State::RelationalExpressionRestS39 => "39:RelationalExpressionRest",
            State::RelationalExpressionRestS40 => "40:RelationalExpressionRest",
            State::ArithmeticExpressionRestS41 => "41:ArithmeticExpressionRest",
            State::ArithmeticExpressionRestS42 => "42:ArithmeticExpressionRest",
            State::TermRestS43 => "43:TermRest",
            State::TermRestS44 => "44:TermRest",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    Number(calculator_actions::Number),
    Bang,
    OpenParenthesis,
    CloseParenthesis,
    True,
    False,
    Plus,
    Minus,
    Mul,
    Div,
    AmpersandAmpersand,
    PipePipe,
    EqualsEquals,
    BangEquals,
}
#[derive(Debug)]
pub enum NonTerminal {
    Expression(calculator_actions::Expression),
    LogicalExpression(calculator_actions::LogicalExpression),
    LogicalExpressionRest(calculator_actions::LogicalExpressionRest),
    RelationalExpression(calculator_actions::RelationalExpression),
    RelationalExpressionRest(calculator_actions::RelationalExpressionRest),
    ArithmeticExpression(calculator_actions::ArithmeticExpression),
    ArithmeticExpressionRest(calculator_actions::ArithmeticExpressionRest),
    Term(calculator_actions::Term),
    TermRest(calculator_actions::TermRest),
    Factor(calculator_actions::Factor),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct CalculatorParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_number_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::FactorP4, 1usize)]),
        _ => vec![],
    }
}
fn action_bang_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_openparenthesis_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_true_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::FactorP5, 1usize)]),
        _ => vec![],
    }
}
fn action_false_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::Div => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::FactorP6, 1usize)]),
        _ => vec![],
    }
}
fn action_minus_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_expression_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_logicalexpression_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExpressionP1, 1usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::ExpressionP1, 1usize)]),
        _ => vec![],
    }
}
fn action_relationalexpression_s9(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LogicalExpressionRestP2, 0usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::LogicalExpressionRestP2, 0usize)]),
        TK::PipePipe => Vec::from(&[Shift(State::PipePipeS16)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s10(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)])
        }
        TK::AmpersandAmpersand => Vec::from(&[Shift(State::AmpersandAmpersandS18)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Shift(State::EqualsEqualsS19)]),
        TK::BangEquals => Vec::from(&[Shift(State::BangEqualsS20)]),
        _ => vec![],
    }
}
fn action_term_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)])
        }
        TK::Plus => Vec::from(&[Shift(State::PlusS22)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS23)]),
        TK::AmpersandAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        _ => vec![],
    }
}
fn action_factor_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS25)]),
        TK::Div => Vec::from(&[Shift(State::DivS26)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        _ => vec![],
    }
}
fn action_factor_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::Div => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::FactorP1, 2usize)]),
        _ => vec![],
    }
}
fn action_expression_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::CloseParenthesis => Vec::from(&[Shift(State::CloseParenthesisS28)]),
        _ => vec![],
    }
}
fn action_factor_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::Div => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::FactorP3, 2usize)]),
        _ => vec![],
    }
}
fn action_pipepipe_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_logicalexpressionrest_s17(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LogicalExpressionP1, 2usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::LogicalExpressionP1, 2usize)]),
        _ => vec![],
    }
}
fn action_ampersandampersand_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_equalsequals_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_bangequals_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_relationalexpressionrest_s21(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionP1, 2usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::RelationalExpressionP1, 2usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionP1, 2usize)]),
        _ => vec![],
    }
}
fn action_plus_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_minus_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_arithmeticexpressionrest_s24(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 2usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 2usize)]),
        TK::AmpersandAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 2usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 2usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 2usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionP1, 2usize)]),
        _ => vec![],
    }
}
fn action_mul_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_div_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::Number => Vec::from(&[Shift(State::NumberS1)]),
        TK::Bang => Vec::from(&[Shift(State::BangS2)]),
        TK::OpenParenthesis => Vec::from(&[Shift(State::OpenParenthesisS3)]),
        TK::True => Vec::from(&[Shift(State::TrueS4)]),
        TK::False => Vec::from(&[Shift(State::FalseS5)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS6)]),
        _ => vec![],
    }
}
fn action_termrest_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::TermP1, 2usize)]),
        _ => vec![],
    }
}
fn action_closeparenthesis_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::Mul => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::Div => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::FactorP2, 3usize)]),
        _ => vec![],
    }
}
fn action_relationalexpression_s29(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LogicalExpressionRestP2, 0usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::LogicalExpressionRestP2, 0usize)]),
        TK::PipePipe => Vec::from(&[Shift(State::PipePipeS16)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s30(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)])
        }
        TK::AmpersandAmpersand => Vec::from(&[Shift(State::AmpersandAmpersandS18)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Shift(State::EqualsEqualsS19)]),
        TK::BangEquals => Vec::from(&[Shift(State::BangEqualsS20)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s31(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)])
        }
        TK::AmpersandAmpersand => Vec::from(&[Shift(State::AmpersandAmpersandS18)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Shift(State::EqualsEqualsS19)]),
        TK::BangEquals => Vec::from(&[Shift(State::BangEqualsS20)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s32(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)])
        }
        TK::AmpersandAmpersand => Vec::from(&[Shift(State::AmpersandAmpersandS18)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP4, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Shift(State::EqualsEqualsS19)]),
        TK::BangEquals => Vec::from(&[Shift(State::BangEqualsS20)]),
        _ => vec![],
    }
}
fn action_term_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)])
        }
        TK::Plus => Vec::from(&[Shift(State::PlusS22)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS23)]),
        TK::AmpersandAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        _ => vec![],
    }
}
fn action_term_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)])
        }
        TK::Plus => Vec::from(&[Shift(State::PlusS22)]),
        TK::Minus => Vec::from(&[Shift(State::MinusS23)]),
        TK::AmpersandAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP3, 0usize)]),
        _ => vec![],
    }
}
fn action_factor_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS25)]),
        TK::Div => Vec::from(&[Shift(State::DivS26)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        _ => vec![],
    }
}
fn action_factor_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::Mul => Vec::from(&[Shift(State::MulS25)]),
        TK::Div => Vec::from(&[Shift(State::DivS26)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::TermRestP3, 0usize)]),
        _ => vec![],
    }
}
fn action_logicalexpressionrest_s37(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::LogicalExpressionRestP1, 3usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::LogicalExpressionRestP1, 3usize)]),
        _ => vec![],
    }
}
fn action_relationalexpressionrest_s38(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP1, 3usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP1, 3usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP1, 3usize)]),
        _ => vec![],
    }
}
fn action_relationalexpressionrest_s39(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP2, 3usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP2, 3usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP2, 3usize)]),
        _ => vec![],
    }
}
fn action_relationalexpressionrest_s40(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::RelationalExpressionRestP3, 3usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::RelationalExpressionRestP3, 3usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::RelationalExpressionRestP3, 3usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpressionrest_s41(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP1, 3usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP1, 3usize)])
        }
        TK::AmpersandAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP1, 3usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP1, 3usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP1, 3usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP1, 3usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpressionrest_s42(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP2, 3usize)]),
        TK::CloseParenthesis => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP2, 3usize)])
        }
        TK::AmpersandAmpersand => {
            Vec::from(&[Reduce(PK::ArithmeticExpressionRestP2, 3usize)])
        }
        TK::PipePipe => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP2, 3usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP2, 3usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::ArithmeticExpressionRestP2, 3usize)]),
        _ => vec![],
    }
}
fn action_termrest_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::TermRestP1, 3usize)]),
        _ => vec![],
    }
}
fn action_termrest_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::CloseParenthesis => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::Plus => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::Minus => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::AmpersandAmpersand => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::PipePipe => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::EqualsEquals => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        TK::BangEquals => Vec::from(&[Reduce(PK::TermRestP2, 3usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS7,
        NonTermKind::LogicalExpression => State::LogicalExpressionS8,
        NonTermKind::RelationalExpression => State::RelationalExpressionS9,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS10,
        NonTermKind::Term => State::TermS11,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_bang_s2(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Factor => State::FactorS13,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BangS2
            )
        }
    }
}
fn goto_openparenthesis_s3(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Expression => State::ExpressionS14,
        NonTermKind::LogicalExpression => State::LogicalExpressionS8,
        NonTermKind::RelationalExpression => State::RelationalExpressionS9,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS10,
        NonTermKind::Term => State::TermS11,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::OpenParenthesisS3
            )
        }
    }
}
fn goto_minus_s6(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Factor => State::FactorS15,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MinusS6
            )
        }
    }
}
fn goto_relationalexpression_s9(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LogicalExpressionRest => State::LogicalExpressionRestS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RelationalExpressionS9
            )
        }
    }
}
fn goto_arithmeticexpression_s10(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::RelationalExpressionRest => State::RelationalExpressionRestS21,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS10
            )
        }
    }
}
fn goto_term_s11(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ArithmeticExpressionRest => State::ArithmeticExpressionRestS24,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TermS11
            )
        }
    }
}
fn goto_factor_s12(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TermRest => State::TermRestS27,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::FactorS12
            )
        }
    }
}
fn goto_pipepipe_s16(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::RelationalExpression => State::RelationalExpressionS29,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS10,
        NonTermKind::Term => State::TermS11,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PipePipeS16
            )
        }
    }
}
fn goto_ampersandampersand_s18(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS30,
        NonTermKind::Term => State::TermS11,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AmpersandAmpersandS18
            )
        }
    }
}
fn goto_equalsequals_s19(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS31,
        NonTermKind::Term => State::TermS11,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::EqualsEqualsS19
            )
        }
    }
}
fn goto_bangequals_s20(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS32,
        NonTermKind::Term => State::TermS11,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BangEqualsS20
            )
        }
    }
}
fn goto_plus_s22(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Term => State::TermS33,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::PlusS22
            )
        }
    }
}
fn goto_minus_s23(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Term => State::TermS34,
        NonTermKind::Factor => State::FactorS12,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MinusS23
            )
        }
    }
}
fn goto_mul_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Factor => State::FactorS35,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::MulS25
            )
        }
    }
}
fn goto_div_s26(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Factor => State::FactorS36,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::DivS26
            )
        }
    }
}
fn goto_relationalexpression_s29(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::LogicalExpressionRest => State::LogicalExpressionRestS37,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::RelationalExpressionS29
            )
        }
    }
}
fn goto_arithmeticexpression_s30(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::RelationalExpressionRest => State::RelationalExpressionRestS38,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS30
            )
        }
    }
}
fn goto_arithmeticexpression_s31(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::RelationalExpressionRest => State::RelationalExpressionRestS39,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS31
            )
        }
    }
}
fn goto_arithmeticexpression_s32(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::RelationalExpressionRest => State::RelationalExpressionRestS40,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS32
            )
        }
    }
}
fn goto_term_s33(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ArithmeticExpressionRest => State::ArithmeticExpressionRestS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TermS33
            )
        }
    }
}
fn goto_term_s34(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::ArithmeticExpressionRest => State::ArithmeticExpressionRestS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TermS34
            )
        }
    }
}
fn goto_factor_s35(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TermRest => State::TermRestS43,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::FactorS35
            )
        }
    }
}
fn goto_factor_s36(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::TermRest => State::TermRestS44,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::FactorS36
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: CalculatorParserDefinition = CalculatorParserDefinition {
    actions: [
        action_aug_s0,
        action_number_s1,
        action_bang_s2,
        action_openparenthesis_s3,
        action_true_s4,
        action_false_s5,
        action_minus_s6,
        action_expression_s7,
        action_logicalexpression_s8,
        action_relationalexpression_s9,
        action_arithmeticexpression_s10,
        action_term_s11,
        action_factor_s12,
        action_factor_s13,
        action_expression_s14,
        action_factor_s15,
        action_pipepipe_s16,
        action_logicalexpressionrest_s17,
        action_ampersandampersand_s18,
        action_equalsequals_s19,
        action_bangequals_s20,
        action_relationalexpressionrest_s21,
        action_plus_s22,
        action_minus_s23,
        action_arithmeticexpressionrest_s24,
        action_mul_s25,
        action_div_s26,
        action_termrest_s27,
        action_closeparenthesis_s28,
        action_relationalexpression_s29,
        action_arithmeticexpression_s30,
        action_arithmeticexpression_s31,
        action_arithmeticexpression_s32,
        action_term_s33,
        action_term_s34,
        action_factor_s35,
        action_factor_s36,
        action_logicalexpressionrest_s37,
        action_relationalexpressionrest_s38,
        action_relationalexpressionrest_s39,
        action_relationalexpressionrest_s40,
        action_arithmeticexpressionrest_s41,
        action_arithmeticexpressionrest_s42,
        action_termrest_s43,
        action_termrest_s44,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_bang_s2,
        goto_openparenthesis_s3,
        goto_invalid,
        goto_invalid,
        goto_minus_s6,
        goto_invalid,
        goto_invalid,
        goto_relationalexpression_s9,
        goto_arithmeticexpression_s10,
        goto_term_s11,
        goto_factor_s12,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_pipepipe_s16,
        goto_invalid,
        goto_ampersandampersand_s18,
        goto_equalsequals_s19,
        goto_bangequals_s20,
        goto_invalid,
        goto_plus_s22,
        goto_minus_s23,
        goto_invalid,
        goto_mul_s25,
        goto_div_s26,
        goto_invalid,
        goto_invalid,
        goto_relationalexpression_s29,
        goto_arithmeticexpression_s30,
        goto_arithmeticexpression_s31,
        goto_arithmeticexpression_s32,
        goto_term_s33,
        goto_term_s34,
        goto_factor_s35,
        goto_factor_s36,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [Some((TK::STOP, false)), None, None, None, None, None, None, None, None, None],
        [
            Some((TK::STOP, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::PipePipe, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::PipePipe, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::False, true)),
            Some((TK::True, true)),
            Some((TK::Bang, true)),
            Some((TK::OpenParenthesis, true)),
            Some((TK::Minus, true)),
            Some((TK::Number, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::PipePipe, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            Some((TK::Mul, true)),
            Some((TK::Div, true)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::PipePipe, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::PipePipe, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::PipePipe, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::AmpersandAmpersand, true)),
            Some((TK::PipePipe, true)),
            Some((TK::EqualsEquals, true)),
            Some((TK::BangEquals, true)),
            Some((TK::CloseParenthesis, true)),
            Some((TK::Plus, true)),
            Some((TK::Minus, true)),
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for CalculatorParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct CalculatorParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        CalculatorParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<
    'i,
> CalculatorParser<
    'i,
    Input,
    StringLexer<Context<'i, Input>, State, TokenKind, TokenRecognizer, TERMINAL_COUNT>,
    DefaultBuilder,
> {
    pub fn new() -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                StringLexer::new(true, &RECOGNIZERS),
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for CalculatorParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
#[allow(dead_code)]
#[derive(Debug)]
pub enum Recognizer {
    Stop,
    StrMatch(&'static str),
    RegexMatch(Lazy<Regex>),
}
#[allow(dead_code)]
#[derive(Debug)]
pub struct TokenRecognizer(TokenKind, Recognizer);
impl<'i> TokenRecognizerT<'i> for TokenRecognizer {
    fn recognize(&self, input: &'i str) -> Option<&'i str> {
        match &self {
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::StrMatch(s)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                if input.starts_with(s) {
                    log!("{}", "recognized".bold().green());
                    Some(s)
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
            #[allow(unused_variables)]
            TokenRecognizer(token_kind, Recognizer::RegexMatch(r)) => {
                logn!("{} {:?} -- ", "    Recognizing".green(), token_kind);
                let match_str = r.find(input);
                match match_str {
                    Some(x) => {
                        let x_str = x.as_str();
                        log!("{} '{}'", "recognized".bold().green(), x_str);
                        Some(x_str)
                    }
                    _ => {
                        log!("{}", "not recognized".red());
                        None
                    }
                }
            }
            TokenRecognizer(_, Recognizer::Stop) => {
                logn!("{} STOP -- ", "    Recognizing".green());
                if input.is_empty() {
                    log!("{}", "recognized".bold().green());
                    Some("")
                } else {
                    log!("{}", "not recognized".red());
                    None
                }
            }
        }
    }
}
pub(crate) static RECOGNIZERS: [TokenRecognizer; TERMINAL_COUNT] = [
    TokenRecognizer(TokenKind::STOP, Recognizer::Stop),
    TokenRecognizer(
        TokenKind::Number,
        Recognizer::RegexMatch(
            Lazy::new(|| { Regex::new(concat!("^", "\\d+(\\.\\d+)?")).unwrap() }),
        ),
    ),
    TokenRecognizer(TokenKind::Bang, Recognizer::StrMatch("!")),
    TokenRecognizer(TokenKind::OpenParenthesis, Recognizer::StrMatch("(")),
    TokenRecognizer(TokenKind::CloseParenthesis, Recognizer::StrMatch(")")),
    TokenRecognizer(TokenKind::True, Recognizer::StrMatch("true")),
    TokenRecognizer(TokenKind::False, Recognizer::StrMatch("false")),
    TokenRecognizer(TokenKind::Plus, Recognizer::StrMatch("+")),
    TokenRecognizer(TokenKind::Minus, Recognizer::StrMatch("-")),
    TokenRecognizer(TokenKind::Mul, Recognizer::StrMatch("*")),
    TokenRecognizer(TokenKind::Div, Recognizer::StrMatch("/")),
    TokenRecognizer(TokenKind::AmpersandAmpersand, Recognizer::StrMatch("&&")),
    TokenRecognizer(TokenKind::PipePipe, Recognizer::StrMatch("||")),
    TokenRecognizer(TokenKind::EqualsEquals, Recognizer::StrMatch("==")),
    TokenRecognizer(TokenKind::BangEquals, Recognizer::StrMatch("!=")),
];
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = calculator_actions::Expression;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Expression(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &mut Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::Number => {
                Terminal::Number(calculator_actions::number(&*context, token))
            }
            TokenKind::Bang => Terminal::Bang,
            TokenKind::OpenParenthesis => Terminal::OpenParenthesis,
            TokenKind::CloseParenthesis => Terminal::CloseParenthesis,
            TokenKind::True => Terminal::True,
            TokenKind::False => Terminal::False,
            TokenKind::Plus => Terminal::Plus,
            TokenKind::Minus => Terminal::Minus,
            TokenKind::Mul => Terminal::Mul,
            TokenKind::Div => Terminal::Div,
            TokenKind::AmpersandAmpersand => Terminal::AmpersandAmpersand,
            TokenKind::PipePipe => Terminal::PipePipe,
            TokenKind::EqualsEquals => Terminal::EqualsEquals,
            TokenKind::BangEquals => Terminal::BangEquals,
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &mut Context<'i, Input>,
        prod: ProdKind,
        _prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::LogicalExpression(p0)) => {
                        NonTerminal::Expression(
                            calculator_actions::expression_logical_expression(
                                &*context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LogicalExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::RelationalExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::LogicalExpressionRest(p1)),
                    ) => {
                        NonTerminal::LogicalExpression(
                            calculator_actions::logical_expression_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LogicalExpressionRestP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::RelationalExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::LogicalExpressionRest(p1)),
                    ) => {
                        NonTerminal::LogicalExpressionRest(
                            calculator_actions::logical_expression_rest_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::LogicalExpressionRestP2 => {
                NonTerminal::LogicalExpressionRest(
                    calculator_actions::logical_expression_rest_empty(context),
                )
            }
            ProdKind::RelationalExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::RelationalExpressionRest(p1)),
                    ) => {
                        NonTerminal::RelationalExpression(
                            calculator_actions::relational_expression_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RelationalExpressionRestP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::RelationalExpressionRest(p1)),
                    ) => {
                        NonTerminal::RelationalExpressionRest(
                            calculator_actions::relational_expression_rest_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RelationalExpressionRestP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::RelationalExpressionRest(p1)),
                    ) => {
                        NonTerminal::RelationalExpressionRest(
                            calculator_actions::relational_expression_rest_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RelationalExpressionRestP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::RelationalExpressionRest(p1)),
                    ) => {
                        NonTerminal::RelationalExpressionRest(
                            calculator_actions::relational_expression_rest_c3(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::RelationalExpressionRestP4 => {
                NonTerminal::RelationalExpressionRest(
                    calculator_actions::relational_expression_rest_empty(context),
                )
            }
            ProdKind::ArithmeticExpressionP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Term(p0)),
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpressionRest(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            calculator_actions::arithmetic_expression_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionRestP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Term(p0)),
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpressionRest(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpressionRest(
                            calculator_actions::arithmetic_expression_rest_c1(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionRestP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Term(p0)),
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpressionRest(p1)),
                    ) => {
                        NonTerminal::ArithmeticExpressionRest(
                            calculator_actions::arithmetic_expression_rest_c2(
                                &*context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionRestP3 => {
                NonTerminal::ArithmeticExpressionRest(
                    calculator_actions::arithmetic_expression_rest_empty(context),
                )
            }
            ProdKind::TermP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Factor(p0)),
                        Symbol::NonTerminal(NonTerminal::TermRest(p1)),
                    ) => {
                        NonTerminal::Term(calculator_actions::term_c1(&*context, p0, p1))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermRestP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Factor(p0)),
                        Symbol::NonTerminal(NonTerminal::TermRest(p1)),
                    ) => {
                        NonTerminal::TermRest(
                            calculator_actions::term_rest_c1(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermRestP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        _,
                        Symbol::NonTerminal(NonTerminal::Factor(p0)),
                        Symbol::NonTerminal(NonTerminal::TermRest(p1)),
                    ) => {
                        NonTerminal::TermRest(
                            calculator_actions::term_rest_c2(&*context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermRestP3 => {
                NonTerminal::TermRest(calculator_actions::term_rest_empty(context))
            }
            ProdKind::FactorP1 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Factor(p0))) => {
                        NonTerminal::Factor(
                            calculator_actions::factor_factor1(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorP2 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Expression(p0)), _) => {
                        NonTerminal::Factor(
                            calculator_actions::factor_expression(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorP3 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (_, Symbol::NonTerminal(NonTerminal::Factor(p0))) => {
                        NonTerminal::Factor(
                            calculator_actions::factor_factor2(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorP4 => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::Number(p0)) => {
                        NonTerminal::Factor(
                            calculator_actions::factor_number(&*context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorP5 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::Factor(calculator_actions::factor_true(context))
            }
            ProdKind::FactorP6 => {
                let _ = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                NonTerminal::Factor(calculator_actions::factor_false(context))
            }
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
