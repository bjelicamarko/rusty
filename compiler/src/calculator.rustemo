Program: OpenBrace StatementList CloseBrace;
StatementList: Statement StatementList
             | EMPTY;
Statement: Assignment
           | IfStatement
           | VariableDeclaration
           | ConstantDeclaration;
Assignment: Identifier Equals Expression SemiColon;
IfStatement: If OpenParenthesis Expression CloseParenthesis OpenBrace StatementList CloseBrace ElseClause
ElseClause: Else OpenBrace StatementList CloseBrace
           | EMPTY;
VariableDeclaration: Let Identifier Equals Expression SemiColon;
ConstantDeclaration: Const Identifier Equals Expression SemiColon;
Expression: LogicalExpression;
LogicalExpression: RelationalExpression LogicalExpressionRest;
LogicalExpressionRest: PipePipe RelationalExpression LogicalExpressionRest 
                     | EMPTY;
RelationalExpression: ArithmeticExpression RelationalExpressionRest;
RelationalExpressionRest: AmpersandAmpersand ArithmeticExpression RelationalExpressionRest
                        | EqualsEquals ArithmeticExpression RelationalExpressionRest
                        | BangEquals ArithmeticExpression RelationalExpressionRest
                        | Less ArithmeticExpression RelationalExpressionRest
                        | LessOrEquals ArithmeticExpression RelationalExpressionRest
                        | Greater ArithmeticExpression RelationalExpressionRest
                        | GreaterOrEquals ArithmeticExpression RelationalExpressionRest
                        | EMPTY;
ArithmeticExpression: Term ArithmeticExpressionRest;
ArithmeticExpressionRest: Plus Term ArithmeticExpressionRest 
                        | Minus Term ArithmeticExpressionRest
                        | EMPTY;
Term: Factor TermRest;
TermRest: Mul Factor TermRest
        | Div Factor TermRest
        | EMPTY;
Factor: Bang Factor
      | OpenParenthesis Expression CloseParenthesis
      | Minus Factor
      | Number
      | True
      | False;


terminals
Number: /\d+(\.\d+)?/;
Identifier: /[a-zA-Z_]+/;
Bang: '!';
OpenParenthesis: '(';
CloseParenthesis: ')';
True: 'true';
False: 'false';
Plus: '+';
Minus: '-';
Mul: '*';
Div: '/';
AmpersandAmpersand: '&&';
PipePipe: '||';
EqualsEquals: '==';
BangEquals: '!=';
Less: '<';
LessOrEquals: '<=';
Greater: '>';
GreaterOrEquals: '>=';
OpenBrace: '{';
CloseBrace: '}';
Equals: '=';
SemiColon: ';';
If: 'if';
Else: 'else';
Let: 'let';
Const: 'const';
